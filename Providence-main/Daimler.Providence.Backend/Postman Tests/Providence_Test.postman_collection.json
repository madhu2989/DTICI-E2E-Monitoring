{
	"info": {
		"_postman_id": "f8c2581c-70d3-4a15-b547-7942e7c1b341",
		"name": "ProvidenceService Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"bearer-token\", \"Bearer \"+jsonData.access_token);",
									"",
									"pm.test(\"Token received\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "resource",
									"value": "{{bearer-client-id}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{bearer-client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{bearer-client-secret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username\n",
									"value": "{{bearer-username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{bearer-password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.windows.net/{{bearer-tenant-id}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"windows",
								"net"
							],
							"path": [
								"{{bearer-tenant-id}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Setup Test Environment",
					"item": [
						{
							"name": "Add Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\": \"{{ms_test_environment_name}}\",\r\n   \"description\": \"Environment for automated postman testing\",\r\n   \"subscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n   \"elementId\": \"{{ms_test_environment_subscriptionid}}\",\r\n   \"isDemo\": true\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environments/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environments",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Service (service1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Service1\",\r\n  \"description\": \"Service for testing\",\r\n  \"elementId\": \"{{ms_test_service1}}\",\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/services/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"services",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Action (action1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Action 1\",\r\n  \"description\": \"Action1 for testing\",\r\n  \"elementId\": \"{{ms_test_action1}}\",\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n  \"serviceElementId\": \"service1\",\r\n  \"checks\": [],\r\n  \"components\": []\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/actions/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"actions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Action (action2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Action 2\",\r\n  \"description\": \"Action2 for testing\",\r\n  \"elementId\": \"{{ms_test_action2}}\",\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n  \"serviceElementId\": \"service1\",\r\n  \"checks\": [],\r\n  \"components\": []\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/actions/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"actions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Component (component1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Component 1\",\r\n  \"description\": \"Component1 for testing\",\r\n  \"elementId\": \"{{ms_test_component1}}\",\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/components/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"components",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Component (component2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Component 2\",\r\n  \"description\": \"Component2 for testing\",\r\n  \"elementId\": \"{{ms_test_component2}}\",\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/components/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"components",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Updated Action (action1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: NoContent (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Action 1\",\r\n  \"description\": \"Action1 for testing\",\r\n  \"serviceElementId\": \"service1\",\r\n  \"checks\": [],\r\n  \"components\": [\r\n    \"component1\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/actions?environmentSubscriptionId={{ms_test_environment_subscriptionid}}&elementId={{ms_test_action1}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"actions"
									],
									"query": [
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										},
										{
											"key": "elementId",
											"value": "{{ms_test_action1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Updated Action (action2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: NoContent (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Action 2\",\r\n  \"description\": \"Action2 for testing\",\r\n  \"serviceElementId\": \"service1\",\r\n  \"checks\": [],\r\n  \"components\": [\r\n    \"component2\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/actions?environmentSubscriptionId={{ms_test_environment_subscriptionid}}&elementId={{ms_test_action2}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"actions"
									],
									"query": [
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										},
										{
											"key": "elementId",
											"value": "{{ms_test_action2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Check (check1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Check1\",\r\n  \"description\": \"Check1 for testing\",\r\n  \"elementId\": \"{{ms_test_checkid1}}\",\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n  \"vstsLink\": \"VSTSLINK\",\r\n  \"frequency\": -1\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/checks/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"checks",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"pm.globals.set(\"ms_test_service1\", \"service1\");",
									"pm.globals.set(\"ms_test_action1\", \"action1\");",
									"pm.globals.set(\"ms_test_action2\", \"action2\");",
									"pm.globals.set(\"ms_test_component1\", \"component1\");",
									"pm.globals.set(\"ms_test_component2\", \"component2\")",
									"pm.globals.set(\"ms_test_checkid1\", \"check1\");",
									"pm.globals.set(\"ms_test_checkid2\", \"check2\");",
									"pm.globals.set(\"ms_test_alertname1\", \"CPU\");",
									"pm.globals.set(\"ms_test_alertname2\", \"Memory\");",
									"pm.globals.set(\"ms_test_alertname3\", \"Throughput Units\");",
									"pm.globals.set(\"ms_test_state_error\", \"ERROR\");",
									"pm.globals.set(\"ms_test_state_warning\", \"WARNING\");",
									"pm.globals.set(\"ms_test_state_ok\", \"OK\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Export Test",
					"item": [
						{
							"name": "Export Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Export Services\", function () {",
											"    pm.expect(jsonData[\"services\"].length == 1).to.be.true;",
											"    pm.expect(jsonData[\"services\"][0].actions.length == 2).to.be.true;",
											"    console.log(\"Service exported.\");",
											"    pm.globals.set(\"ms_test_environment_services\", JSON.stringify(jsonData[\"services\"]));}); ",
											"",
											"pm.test(\"Export Actions\", function () {",
											"    pm.expect(jsonData[\"actions\"].length == 2).to.be.true;",
											"    pm.expect(jsonData[\"actions\"][0].components.length == 1).to.be.true;",
											"    pm.expect(jsonData[\"actions\"][1].components.length == 1).to.be.true;",
											"    console.log(\"Action exported.\");",
											"    pm.globals.set(\"ms_test_environment_actions\", JSON.stringify(jsonData[\"actions\"]));});",
											"",
											"pm.test(\"Export Components\", function () {",
											"    pm.expect(jsonData[\"components\"].length == 2).to.be.true;      ",
											"    console.log(\"Component exported.\");",
											"    pm.globals.set(\"ms_test_environment_components\", JSON.stringify(jsonData[\"components\"]));});",
											"",
											"pm.test(\"Export Checks\", function () {",
											"    pm.expect(jsonData[\"checks\"].length == 1).to.be.true;",
											"    console.log(\"Check exported.\");",
											"    pm.globals.set(\"ms_test_environment_checks\", JSON.stringify(jsonData[\"checks\"]));});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environmentUpdate?environmentSubscriptionId={{ms_test_environment_subscriptionid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environmentUpdate"
									],
									"query": [
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteEnvironment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environments?elementId={{ms_test_environment_subscriptionid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environments"
									],
									"query": [
										{
											"key": "elementId",
											"value": "{{ms_test_environment_subscriptionid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Import Test",
					"item": [
						{
							"name": "Add Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\": \"{{ms_test_environment_name}}\",\r\n   \"description\": \"Environment for automated postman testing\",\r\n   \"subscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n   \"elementId\": \"{{ms_test_environment_subscriptionid}}\",\r\n   \"isDemo\": true\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environments/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environments",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ms_test_environment_id\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{ms_test_environment_name}}\",\r\n  \"description\": \"Environment for automated postman testing\",\r\n  \"subscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n  \"isDemo\": true\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"services\": {{ms_test_environment_services}},\n\t\"actions\": {{ms_test_environment_actions}},\n\t\"components\": {{ms_test_environment_components}},\n\t\"checks\": {{ms_test_environment_checks}}\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environmentUpdate?instance_name={{ms_test_environment_name}}&environmentSubscriptionId={{ms_test_environment_subscriptionid}}&replace=All",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environmentUpdate"
									],
									"query": [
										{
											"key": "instance_name",
											"value": "{{ms_test_environment_name}}"
										},
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										},
										{
											"key": "replace",
											"value": "All"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Export Services\", function () {",
											"    pm.expect(jsonData[\"services\"].length == 1).to.be.true;",
											"    pm.expect(jsonData[\"services\"][0].actions.length == 2).to.be.true;",
											"    console.log(\"Service exported.\");",
											"    pm.globals.set(\"ms_test_environment_services\", JSON.stringify(jsonData[\"services\"]));}); ",
											"",
											"pm.test(\"Export Actions\", function () {",
											"    pm.expect(jsonData[\"actions\"].length == 2).to.be.true;",
											"    pm.expect(jsonData[\"actions\"][0].components.length == 1).to.be.true;",
											"    pm.expect(jsonData[\"actions\"][1].components.length == 1).to.be.true;",
											"    console.log(\"Action exported.\");",
											"    pm.globals.set(\"ms_test_environment_actions\", JSON.stringify(jsonData[\"actions\"]));});",
											"",
											"pm.test(\"Export Components\", function () {",
											"    pm.expect(jsonData[\"components\"].length == 2).to.be.true;      ",
											"    console.log(\"Component exported.\");",
											"    pm.globals.set(\"ms_test_environment_components\", JSON.stringify(jsonData[\"components\"]));});",
											"",
											"pm.test(\"Export Checks\", function () {",
											"    pm.expect(jsonData[\"checks\"].length == 1).to.be.true;",
											"    console.log(\"Check exported.\");",
											"    pm.globals.set(\"ms_test_environment_checks\", JSON.stringify(jsonData[\"checks\"]));});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environmentUpdate?environmentSubscriptionId={{ms_test_environment_subscriptionid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environmentUpdate"
									],
									"query": [
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Services\": [],\n    \"Actions\": [\n        {\n            \"name\": \"Action 1\",\n            \"description\": \"Action1 for testing\",\n            \"elementId\": \"action1\",\n            \"components\": [\n                \"component3\"\n            ]\n        }\n    ],\n    \"Components\": [\n        {\n            \"name\": \"Component 3\",\n            \"description\": \"Component3 for testing\",\n            \"elementId\": \"component3\",\n            \"componentType\": \"Component\"\n        }\n    ],\n    \"Checks\": [\n        {\n            \"name\": \"Check 2\",\n            \"description\": \"Check2 for testing\",\n            \"elementId\": \"check2\",\n            \"vstsLink\": \"VSTSLINK\",\n            \"frequency\": 60\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environmentUpdate?instance_name={{ms_test_environment_name}}&environmentSubscriptionId={{ms_test_environment_subscriptionid}}&replace=False",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environmentUpdate"
									],
									"query": [
										{
											"key": "instance_name",
											"value": "{{ms_test_environment_name}}"
										},
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										},
										{
											"key": "replace",
											"value": "False"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Export Services\", function () {",
											"    pm.expect(jsonData[\"services\"].length == 1).to.be.true;",
											"    pm.expect(jsonData[\"services\"][0].actions.length == 2).to.be.true;",
											"    console.log(\"Service exported.\");",
											"    pm.globals.set(\"ms_test_environment_services\", JSON.stringify(jsonData[\"services\"]));}); ",
											"",
											"pm.test(\"Export Actions\", function () {",
											"    pm.expect(jsonData[\"actions\"].length == 2).to.be.true;",
											"    pm.expect(jsonData[\"actions\"][0].components.length == 2).to.be.true;",
											"    pm.expect(jsonData[\"actions\"][1].components.length == 1).to.be.true;",
											"    console.log(\"Action exported.\");",
											"    pm.globals.set(\"ms_test_environment_actions\", JSON.stringify(jsonData[\"actions\"]));});",
											"",
											"pm.test(\"Export Components\", function () {",
											"    pm.expect(jsonData[\"components\"].length == 3).to.be.true;      ",
											"    console.log(\"Component exported.\");",
											"    pm.globals.set(\"ms_test_environment_components\", JSON.stringify(jsonData[\"components\"]));});",
											"",
											"pm.test(\"Export Checks\", function () {",
											"    pm.expect(jsonData[\"checks\"].length == 2).to.be.true;",
											"    console.log(\"Check exported.\");",
											"    pm.globals.set(\"ms_test_environment_checks\", JSON.stringify(jsonData[\"checks\"]));});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environmentUpdate?environmentSubscriptionId={{ms_test_environment_subscriptionid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environmentUpdate"
									],
									"query": [
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Environment - with invalid assignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: BadRequest (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Services\": [\n        {           \n            \"name\": \"Service1\",\n            \"description\": \"Service for testing\",\n            \"elementId\": \"service1\",\n            \"actions\": [\n                \"action3\"\n            ]\n        }\n    ],\n    \"Actions\": [\n         {\n            \"name\": \"Action 4\",\n            \"description\": \"Action4 for testing\",\n            \"elementId\": \"action4\",\n            \"components\": []\n        }\n    ],\n    \"Components\": [\n        {\n            \"name\": \"Component 4\",\n            \"description\": \"Component4 for testing\",\n            \"elementId\": \"component4\",\n            \"componentType\": \"Component\"\n        },\n         {\n            \"name\": \"Component 4\",\n            \"description\": \"Component4 for testing\",\n            \"elementId\": \"component4\",\n            \"componentType\": \"Component\"\n        }\n    ],\n    \"Checks\": []\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environmentUpdate?instance_name={{ms_test_environment_name}}&environmentSubscriptionId={{ms_test_environment_subscriptionid}}&replace=True",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environmentUpdate"
									],
									"query": [
										{
											"key": "instance_name",
											"value": "{{ms_test_environment_name}}"
										},
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										},
										{
											"key": "replace",
											"value": "True"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Export Services\", function () {",
											"    pm.expect(jsonData[\"services\"].length == 1).to.be.true;",
											"    pm.expect(jsonData[\"services\"][0].actions.length == 2).to.be.true;",
											"    console.log(\"Service exported.\");",
											"    pm.globals.set(\"ms_test_environment_services\", JSON.stringify(jsonData[\"services\"]));}); ",
											"",
											"pm.test(\"Export Actions\", function () {",
											"    pm.expect(jsonData[\"actions\"].length == 2).to.be.true;",
											"    pm.expect(jsonData[\"actions\"][0].components.length == 2).to.be.true;",
											"    pm.expect(jsonData[\"actions\"][1].components.length == 1).to.be.true;",
											"    console.log(\"Action exported.\");",
											"    pm.globals.set(\"ms_test_environment_actions\", JSON.stringify(jsonData[\"actions\"]));});",
											"",
											"pm.test(\"Export Components\", function () {",
											"    pm.expect(jsonData[\"components\"].length == 3).to.be.true;      ",
											"    console.log(\"Component exported.\");",
											"    pm.globals.set(\"ms_test_environment_components\", JSON.stringify(jsonData[\"components\"]));});",
											"",
											"pm.test(\"Export Checks\", function () {",
											"    pm.expect(jsonData[\"checks\"].length == 2).to.be.true;",
											"    console.log(\"Check exported.\");",
											"    pm.globals.set(\"ms_test_environment_checks\", JSON.stringify(jsonData[\"checks\"]));});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environmentUpdate?environmentSubscriptionId={{ms_test_environment_subscriptionid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environmentUpdate"
									],
									"query": [
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Environment Partial",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"services\": [\n        {\n            \"actions\": [\n                \"action1\",\n                \"action2\"\n            ],\n            \"elementId\": \"service1\",\n            \"name\": \"Service1\",\n            \"description\": \"Service for testing\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"components\": [\n                \"component1\"\n            ],\n            \"elementId\": \"action1\",\n            \"name\": \"Action 1\",\n            \"description\": \"Action1 for testing\"\n        },\n        {\n            \"components\": [\n                \"component2\"\n            ],\n            \"elementId\": \"action2\",\n            \"name\": \"Action 2\",\n            \"description\": \"Action2 for testing\"\n        }\n    ],\n    \"components\": [\n        {\n            \"componentType\": null,\n            \"elementId\": \"component1\",\n            \"name\": \"Component1\",\n            \"description\": \"Component1\"\n        },\n        {\n            \"componentType\": null,\n            \"elementId\": \"component2\",\n            \"name\": \"Component2\",\n            \"description\": \"Component2\"\n        },\n        {\n            \"componentType\": \"Component\",\n            \"elementId\": \"component3\",\n            \"name\": \"Component 3\",\n            \"description\": \"Component3 for testing\"\n        }\n    ],\n    \"checks\": [\n        {\n            \"vstsLink\": \"VSTSLINK\",\n            \"frequency\": -1,\n            \"elementId\": \"check1\",\n            \"name\": \"Check1\",\n            \"description\": \"Check1\"\n        },\n        {\n            \"vstsLink\": \"VSTSLINK\",\n            \"frequency\": 60,\n            \"elementId\": \"check2\",\n            \"name\": \"Check 2\",\n            \"description\": \"Check2 for testing\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environmentUpdate?instance_name={{ms_test_environment_name}}&environmentSubscriptionId={{ms_test_environment_subscriptionid}}&replace=True",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environmentUpdate"
									],
									"query": [
										{
											"key": "instance_name",
											"value": "{{ms_test_environment_name}}"
										},
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										},
										{
											"key": "replace",
											"value": "True"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Export Services\", function () {",
											"    pm.expect(jsonData[\"services\"].length == 1).to.be.true;",
											"    pm.expect(jsonData[\"services\"][0].actions.length == 2).to.be.true;",
											"    console.log(\"Service exported.\");",
											"    pm.globals.set(\"ms_test_environment_services\", JSON.stringify(jsonData[\"services\"]));}); ",
											"",
											"pm.test(\"Export Actions\", function () {",
											"    pm.expect(jsonData[\"actions\"].length == 2).to.be.true;",
											"    pm.expect(jsonData[\"actions\"][0].components.length == 1).to.be.true;",
											"    pm.expect(jsonData[\"actions\"][1].components.length == 1).to.be.true;",
											"    console.log(\"Action exported.\");",
											"    pm.globals.set(\"ms_test_environment_actions\", JSON.stringify(jsonData[\"actions\"]));});",
											"",
											"pm.test(\"Export Components\", function () {",
											"    pm.expect(jsonData[\"components\"].length == 3).to.be.true;      ",
											"    console.log(\"Component exported.\");",
											"    pm.globals.set(\"ms_test_environment_components\", JSON.stringify(jsonData[\"components\"]));});",
											"",
											"pm.test(\"Export Checks\", function () {",
											"    pm.expect(jsonData[\"checks\"].length == 2).to.be.true;",
											"    console.log(\"Check exported.\");",
											"    pm.globals.set(\"ms_test_environment_checks\", JSON.stringify(jsonData[\"checks\"]));});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environmentUpdate?environmentSubscriptionId={{ms_test_environment_subscriptionid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environmentUpdate"
									],
									"query": [
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test CRUD",
					"item": [
						{
							"name": "Add existing Service (service1 )",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Conflict (409)\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Service1\",\r\n  \"description\": \"Service for testing\",\r\n  \"elementId\": \"{{ms_test_service1}}\",\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/services/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"services",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add existing Action (action1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Conflict (409)\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"AcTion1\",\r\n  \"description\": \"Action1 for testing\",\r\n  \"elementId\": \"{{ms_test_action1}}\",\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n  \"serviceElementId\": \"service1\",\r\n  \"checks\": [\r\n    \"actioncheck1\"\r\n  ],\r\n  \"components\": [\r\n    \"eventhub\", \"component1\", \"component2\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/actions/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"actions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add existing Component (component1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Conflict (409)\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ComPonEnt1\",\r\n  \"description\": \"Component1\",\r\n  \"elementId\": \"{{ms_test_component1}}\",\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/components/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"components",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add existing Check (check1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Conflict (409)\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Check1\",\r\n  \"description\": \"Check1 for testing\",\r\n  \"elementId\": \"{{ms_test_checkid1}}\",\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n  \"vstsLink\": \"VSTSLINK\",\r\n  \"frequency\": -1\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/checks/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"checks",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test single Alert for Component",
					"item": [
						{
							"name": "Refresh Heartbeat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"subscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n    \"checkId\" : \"HeartbeatAlert\",\r\n    \"description\" : \"log heartbeat\",\r\n    \"state\": \"OK\",\r\n    \"alertName\": \"heartbeat\",\r\n    \"ComponentId\": \"{{ms_test_environment_subscriptionid}}\",\r\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\r\n    \"TimeGenerated\": \"{{current_timestamp}}\",\r\n    \"RecordID\": \"{{random_guid}}\"\r\n} \r\n"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should be empty\", function () {",
											"   pm.globals.set(\"current_history_entries\", 0);",
											"   pm.expect(jsonData[\"{{ms_test_environment_subscriptionid}}\"] == undefined).to.be.true;",
											"   pm.expect(jsonData[\"service1\"] == undefined).to.be.true;",
											"   pm.expect(jsonData[\"action1\"] == undefined).to.be.true;",
											"   pm.expect(jsonData[\"component1\"] == undefined).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send error for component1/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_error}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should not be empty\", function () {",
											"   var subscriptionId = pm.environment.get(\"ms_test_environment_subscriptionid\");",
											"   pm.expect(jsonData[subscriptionId].length == 1).to.be.true;",
											"   pm.expect(jsonData[\"service1\"].length == 1).to.be.true;",
											"   pm.expect(jsonData[\"action1\"].length == 1).to.be.true;",
											"   pm.expect(jsonData[\"component1\"].length == 1).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send ok for component1/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_ok}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should not be empty\", function () {",
											"   var subscriptionId = pm.environment.get(\"ms_test_environment_subscriptionid\");",
											"   pm.expect(jsonData[subscriptionId].length == 2).to.be.true;",
											"   pm.expect(jsonData[\"service1\"].length == 2).to.be.true;",
											"   pm.expect(jsonData[\"action1\"].length == 2).to.be.true;",
											"   pm.expect(jsonData[\"component1\"].length == 2).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test multiple Alerts for Component",
					"item": [
						{
							"name": "Send error for component1/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_error}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send error for component1/check1 (Memory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname2}}\",\n    \"State\": \"{{ms_test_state_error}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send error for component1/check1 (TPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname3}}\",\n    \"State\": \"{{ms_test_state_error}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send ok for component1/check1 (TPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname3}}\",\n    \"State\": \"{{ms_test_state_ok}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should not be empty\", function () {",
											"   var subscriptionId = pm.environment.get(\"ms_test_environment_subscriptionid\");",
											"   pm.expect(jsonData[subscriptionId].length == 6).to.be.true;",
											"   pm.expect(jsonData[\"service1\"].length == 6).to.be.true;",
											"   pm.expect(jsonData[\"action1\"].length == 6).to.be.true;",
											"   pm.expect(jsonData[\"component1\"].length == 6).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send ok for component1/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_ok}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send ok for component1/check1 (Memory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname2}}\",\n    \"State\": \"{{ms_test_state_ok}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should not be empty\", function () {",
											"   var subscriptionId = pm.environment.get(\"ms_test_environment_subscriptionid\");",
											"   pm.expect(jsonData[subscriptionId].length == 7).to.be.true;",
											"   pm.expect(jsonData[\"service1\"].length == 7).to.be.true;",
											"   pm.expect(jsonData[\"action1\"].length == 7).to.be.true;",
											"   pm.expect(jsonData[\"component1\"].length == 7).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "TestResetToGreen",
					"item": [
						{
							"name": "Send error for component2/check2 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date(new Date().getTime() - 5000);",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid2}}\",\n\t\"ComponentId\": \"{{ms_test_component2}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_error}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid2\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component2\"));",
											"});",
											"",
											"pm.test(\"Component2 State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component2 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component2\"));",
											"    ",
											"    pm.expect(component2).to.not.equal(null);",
											"    pm.expect(component2.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											"",
											"pm.test(\"Check2 should be added to Component2 and is in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component2 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component2\"));",
											"",
											"    pm.expect(component2.checks.length).to.equal(1);",
											"    pm.expect(component2.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid2\"));",
											"    pm.expect(component2.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 180000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResetToGreen Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: NoContent (204)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/reset/{{ms_test_environment_subscriptionid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"reset",
										"{{ms_test_environment_subscriptionid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 60000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid2\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component2\"));",
											"});",
											"",
											"pm.test(\"Component2 State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component2 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component2\"));",
											"    ",
											"    pm.expect(component2).to.not.equal(null);",
											"    pm.expect(component2.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											"",
											"pm.test(\"Check2 should be added to Component2 and is in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component2 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component2\"));",
											"",
											"    pm.expect(component2.checks.length).to.equal(1);",
											"    pm.expect(component2.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid2\"));",
											"    pm.expect(component2.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "TestGreenToGreen",
					"item": [
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should not be empty\", function () {",
											"   var subscriptionId = pm.environment.get(\"ms_test_environment_subscriptionid\");",
											"   pm.expect(jsonData[subscriptionId].length == 9).to.be.true;",
											"   pm.expect(jsonData[\"service1\"].length == 9).to.be.true;",
											"   pm.expect(jsonData[\"action1\"].length == 7).to.be.true;",
											"   pm.expect(jsonData[\"component1\"].length == 7).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}?includeChecks=true",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									],
									"query": [
										{
											"key": "includeChecks",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send ok for component1/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_ok}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should not be empty\", function () {",
											"   var subscriptionId = pm.environment.get(\"ms_test_environment_subscriptionid\");",
											"   pm.expect(jsonData[subscriptionId].length == 10).to.be.true;",
											"   pm.expect(jsonData[\"service1\"].length == 10).to.be.true;",
											"   pm.expect(jsonData[\"action1\"].length == 8).to.be.true;",
											"   pm.expect(jsonData[\"component1\"].length == 8).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}?includeChecks=true",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									],
									"query": [
										{
											"key": "includeChecks",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test  AlertIgnore",
					"item": [
						{
							"name": "Add AlertIgnore (check1)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var expire_timestamp = new Date(new Date().getTime() + 3600000);",
											"postman.setEnvironmentVariable(\"expire_timestamp\", expire_timestamp.toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"ms_test_alertIgnore_id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Test AlertIgnore for Check1\",\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n  \"creationDate\": \"{{current_timestamp}}\",\r\n  \"expirationDate\": \"{{expire_timestamp}}\",\r\n  \"ignoreCondition\": {\r\n \t  \"checkId\" : \"{{ms_test_checkid1}}\",\r\n \t  \"componentId\" : \"\",\r\n    \"Description\" : \"\",\r\n    \"state\": \"\",\r\n    \"CustomField1\": \"\",\r\n    \"CustomField2\": \"\",\r\n    \"CustomField3\": \"\",\r\n    \"CustomField4\": \"\",\r\n    \"CustomField5\": \"\",\r\n    \"AlertName\": \"\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alertIgnores/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alertIgnores",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should not be empty\", function () {",
											"   var subscriptionId = pm.environment.get(\"ms_test_environment_subscriptionid\");",
											"   pm.expect(jsonData[subscriptionId].length == 10).to.be.true;",
											"   pm.expect(jsonData[\"service1\"].length == 10).to.be.true;",
											"   pm.expect(jsonData[\"action1\"].length == 8).to.be.true;",
											"   pm.expect(jsonData[\"component1\"].length == 8).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}?includeChecks=true",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									],
									"query": [
										{
											"key": "includeChecks",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send error for component1/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date(new Date().getTime() - 5000);",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_error}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should not be empty\", function () {",
											"   var subscriptionId = pm.environment.get(\"ms_test_environment_subscriptionid\");",
											"   pm.expect(jsonData[subscriptionId].length == 10).to.be.true;",
											"   pm.expect(jsonData[\"service1\"].length == 10).to.be.true;",
											"   pm.expect(jsonData[\"action1\"].length == 8).to.be.true;",
											"   pm.expect(jsonData[\"component1\"].length == 8).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}?includeChecks=true",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									],
									"query": [
										{
											"key": "includeChecks",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete AlertIgnore (check1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/alertIgnores/{{ms_test_alertIgnore_id}}?environmentSubscriptionId={{ms_test_environment_subscriptionid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alertIgnores",
										"{{ms_test_alertIgnore_id}}"
									],
									"query": [
										{
											"key": "environmentSubscriptionId",
											"value": "{{ms_test_environment_subscriptionid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send error for component1/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date(new Date().getTime() - 5000);",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_error}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should not be empty\", function () {",
											"   var subscriptionId = pm.environment.get(\"ms_test_environment_subscriptionid\");",
											"   pm.expect(jsonData[subscriptionId].length == 11).to.be.true;",
											"   pm.expect(jsonData[\"service1\"].length == 11).to.be.true;",
											"   pm.expect(jsonData[\"action1\"].length == 9).to.be.true;",
											"   pm.expect(jsonData[\"component1\"].length == 9).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}?includeChecks=true",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									],
									"query": [
										{
											"key": "includeChecks",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send ok for component1/check1 (CPU)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date(new Date().getTime() - 5000);",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_ok}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test Unassigned Components",
					"item": [
						{
							"name": "Send error for ComponentXYZ/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"ComponentXYZ\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_error}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Unassigned Service/Action/Component",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(\"ComponentXYZ\");",
											"});",
											"",
											"pm.test(\"UnassignedComponent Service State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"\tvar serviceNode = Utils.getNodeByIdRecursive(jsonData, \"UnassignedComponents\"+pm.environment.get(\"ms_test_environment_name\"));",
											"    pm.expect(serviceNode).to.not.equal(null);",
											"    pm.expect(serviceNode.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											"",
											"pm.test(\"UnassignedComponent Action State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"\tvar actionNode = Utils.getNodeByIdRecursive(jsonData, \"UnassignedComponentsAction\"+pm.environment.get(\"ms_test_environment_name\"));",
											"    pm.expect(actionNode).to.not.equal(null);",
											"    pm.expect(actionNode.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											"",
											"pm.test(\"UnassignedComponent State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    var componentNode = Utils.getNodeByIdRecursive(jsonData, \"ComponentXYZ\");",
											"    pm.expect(componentNode).to.not.equal(null);",
											"    pm.expect(componentNode.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send ok for ComponentXYZ/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"ComponentXYZ\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_ok}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Email Notification",
					"item": [
						{
							"name": "Add NotificationRule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonData = pm.response.json();",
											"    pm.globals.set(\"ms_test_emailRule_id\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n  \"levels\": [\r\n    \"Environment\"\r\n  ],\r\n  \"emailAddresses\": \"test.test@test.com\",\r\n  \"states\": [\r\n    \"OK\", \"ERROR\"\r\n  ],\r\n  \"notificationInterval\" : 3000,\r\n  \"isActive\": true\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/notificationRules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"notificationRules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update NotificationRule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: NoContent (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n    \"levels\": [\r\n        \"Environment\",\r\n        \"Service\"\r\n    ],\r\n    \"emailAddresses\": \"test.test@test.com;test1.test1@test1.com\",\r\n    \"states\": [\r\n        \"OK\",\r\n        \"ERROR\"\r\n    ],  \r\n    \"notificationInterval\" : 6000,\r\n    \"isActive\": false\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/notificationRules/{{ms_test_emailRule_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"notificationRules",
										"{{ms_test_emailRule_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get NotificationRule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/notificationRules/{{ms_test_emailRule_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"notificationRules",
										"{{ms_test_emailRule_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get NotificationRules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/notificationRules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"notificationRules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete NotificationRule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/notificationRules/{{ms_test_emailRule_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"notificationRules",
										"{{ms_test_emailRule_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get NotificationRule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: NotFound (404)\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/notificationRules/{{ms_test_emailRule_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"notificationRules",
										"{{ms_test_emailRule_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Environment Warning",
					"item": [
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(\"ComponentXYZ\");",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should not be empty\", function () {",
											"   var subscriptionId = pm.environment.get(\"ms_test_environment_subscriptionid\");",
											"   pm.expect(jsonData[subscriptionId].length == 14).to.be.true;",
											"   pm.expect(jsonData[\"service1\"].length == 12).to.be.true;",
											"   pm.expect(jsonData[\"action1\"].length == 10).to.be.true;",
											"   pm.expect(jsonData[\"component1\"].length == 10).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}?includeChecks=true",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									],
									"query": [
										{
											"key": "includeChecks",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send warning for component1/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_warning}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(\"ComponentXYZ\");",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_warning\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_warning\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_warning\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_warning\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"History should not be empty\", function () {",
											"   var subscriptionId = pm.environment.get(\"ms_test_environment_subscriptionid\");",
											"   pm.expect(jsonData[subscriptionId].length == 14).to.be.true;",
											"   pm.expect(jsonData[\"service1\"].length == 13).to.be.true;",
											"   pm.expect(jsonData[\"action1\"].length == 11).to.be.true;",
											"   pm.expect(jsonData[\"component1\"].length == 11).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}?includeChecks=true",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									],
									"query": [
										{
											"key": "includeChecks",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test Deployment Windows",
					"item": [
						{
							"name": "Get Deployment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should contain no data\", function () {",
											"   var jsonData = pm.response.json();",
											"   pm.expect(jsonData.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/deployments/history/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"deployments",
										"history",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Deployment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"ms_test_deployment_id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"environmentsubscriptionid\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"elementIds\": [\"component1\"],\n\t\"description\": \"Postman Deployment Test.\",\n\t\"shortDescription\": \"Test\",\n\t\"startDate\" : \"{{current_timestamp}}\"\n}\n"
								},
								"url": {
									"raw": "{{HOST}}/api/deployments",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"deployments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Deployment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should contain data\", function () {",
											"   var jsonData = pm.response.json();",
											"   pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Deployment in Response should have no EndDate\", function () {",
											"   var jsonData = pm.response.json();",
											"   pm.expect(jsonData[0].EndDate).to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/deployments/history/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"deployments",
										"history",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Deployment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"current_timestamp.setDate(current_timestamp.getDate() + 2);",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: NoContent (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"elementIds\": [\"component1\"],\n\t\"description\": \"Update Deployment Test.\",\n\t\"shortDescription\": \"Test\",\n\t\"closeReason\": \"Test successfully\",\n\t\"endDate\" : \"{{current_timestamp}}\"\n}\n\n"
								},
								"url": {
									"raw": "{{HOST}}/api/deployments/{{ms_test_environment_subscriptionid}}/{{ms_test_deployment_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"deployments",
										"{{ms_test_environment_subscriptionid}}",
										"{{ms_test_deployment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Deployment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should contain data\", function () {",
											"   var jsonData = pm.response.json();",
											"   pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Deployment in Response should have an EndDate\", function () {",
											"   var jsonData = pm.response.json();",
											"   pm.expect(jsonData[0].EndDate).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/deployments/history/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"deployments",
										"history",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Deployment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/deployments/{{ms_test_environment_subscriptionid}}/{{ms_test_deployment_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"deployments",
										"{{ms_test_environment_subscriptionid}}",
										"{{ms_test_deployment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Deployment History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should contain no data\", function () {",
											"   var jsonData = pm.response.json();",
											"   pm.expect(jsonData.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/deployments/history/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"deployments",
										"history",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updated deleted Deployment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"current_timestamp.setDate(current_timestamp.getDate() + 2);",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: NotFound (404)\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"elementIds\": [\"component1\"],\n\t\"description\": \"Update Deployment Test.\",\n\t\"shortDescription\": \"Test\",\n\t\"closeReason\": \"Test successfully\",\n\t\"endDate\" : \"{{current_timestamp}}\"\n}\n\n"
								},
								"url": {
									"raw": "{{HOST}}/api/deployments/{{ms_test_environment_subscriptionid}}/{{ms_test_deployment_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"deployments",
										"{{ms_test_environment_subscriptionid}}",
										"{{ms_test_deployment_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Alert Comments",
					"item": [
						{
							"name": "Get StateTransitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: OK (200)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = JSON.parse(responseBody);     \r",
											"    pm.globals.set(\"ms_test_statetransition_recordId\", jsonData[0].recordId);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/statetransitions/history/{{ms_test_environment_name}}?&elementId=component1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"statetransitions",
										"history",
										"{{ms_test_environment_name}}"
									],
									"query": [
										{
											"key": null,
											"value": null
										},
										{
											"key": "elementId",
											"value": "component1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AlertComments By StateTransitionRecordId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should not contain data\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/alertComments/{{ms_test_statetransition_recordId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alertComments",
										"{{ms_test_statetransition_recordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add AlertComment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"     pm.globals.set(\"ms_test_alertComment_id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user\": \"SmokeTestUser\",\r\n  \"comment\": \"Creating AlertComment as Test.\",\r\n  \"state\": 1,\r\n  \"recordId\": \"{{ms_test_statetransition_recordId}}\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alertComments",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alertComments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AlertComments By StateTransitionRecordId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain data\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"State should be \\\"OPEN\\\"\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData[0].state).to.eql(\"OPEN\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/alertComments/{{ms_test_statetransition_recordId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alertComments",
										"{{ms_test_statetransition_recordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AlertComment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: NoContent (204)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user\": \"SmokeTestUser\",\r\n  \"comment\": \"Creating AlertComment as Test.\",\r\n  \"state\": 2\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alertComments/{{ms_test_alertComment_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alertComments",
										"{{ms_test_alertComment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AlertComments By StateTransitionRecordId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain data\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"State should be \\\"IN PROGRESS\\\"\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData[0].state).to.eql(\"IN PROGRESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/alertComments/{{ms_test_statetransition_recordId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alertComments",
										"{{ms_test_statetransition_recordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete AlertComment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/alertComments/{{ms_test_alertComment_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alertComments",
										"{{ms_test_alertComment_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Configurations",
					"item": [
						{
							"name": "Add Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n\t\"key\": \"ConfigurationKey\",\r\n\t\"value\": \"ConfigurationValue\",\r\n\t\"description\": \"Creating configuration for test.\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/configurations",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain data\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Value should be \\\"ConfigurationValue\\\"\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.value).to.eql(\"ConfigurationValue\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/configurations/{{ms_test_environment_subscriptionid}}?configurationKey=ConfigurationKey",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"configurations",
										"{{ms_test_environment_subscriptionid}}"
									],
									"query": [
										{
											"key": "configurationKey",
											"value": "ConfigurationKey"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: NoContent (204)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"value\": \"ConfigurationValue_Updated\",\r\n\t\"description\": \"Creating configuration for test.\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/configurations/{{ms_test_environment_subscriptionid}}/ConfigurationKey",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"configurations",
										"{{ms_test_environment_subscriptionid}}",
										"ConfigurationKey"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain data\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Value should be \\\"ConfigurationValue_Updated\\\"\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.value).to.eql(\"ConfigurationValue_Updated\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/configurations/{{ms_test_environment_subscriptionid}}?configurationKey=ConfigurationKey",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"configurations",
										"{{ms_test_environment_subscriptionid}}"
									],
									"query": [
										{
											"key": "configurationKey",
											"value": "ConfigurationKey"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/configurations/{{ms_test_environment_subscriptionid}}/ConfigurationKey",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"configurations",
										"{{ms_test_environment_subscriptionid}}",
										"ConfigurationKey"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test StateIncreaseRules",
					"item": [
						{
							"name": "Add StateIncreaseRule",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var expire_timestamp = new Date(new Date().getTime() + 3600000);",
											"postman.setEnvironmentVariable(\"expire_timestamp\", expire_timestamp.toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"Test StateIncreaseRule\",\r\n\t\"description\": \"Rule to increase specifiy Alerts\",\r\n\t\"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n\t\"checkId\" : \"{{ms_test_checkid1}}\",\r\n\t\"alertName\": \"{{ms_test_alertname1}}\",\r\n\t\"ComponentId\": \"{{ms_test_component1}}\",\r\n\t\"triggerTime\": 1,\r\n\t\"isActive\": true\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/stateIncreaseRules/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"stateIncreaseRules",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Send warning for component1/check1 (CPU)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_warning}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(\"ComponentXYZ\");",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_warning\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_warning\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_warning\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_warning\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 120000);",
											"",
											"function checkStatusCode() {",
											"    ",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"        ",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State for error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send warning for component1/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_warning}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"State of \" + pm.globals.get(\"ms_test_component1\") + \" is \" + pm.globals.get(\"ms_test_state_error\"), function () {",
											"    ",
											"    var eventHubNode = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"     pm.expect(eventHubNode).to.not.equal(null);",
											"",
											"    // is eventhub state as expected?",
											"    pm.expect(eventHubNode.state.state).to.equal(pm.globals.get(\"ms_test_state_error\"));",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send ok for component1/check1 (CPU)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();",
											"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());",
											"",
											"var randomRecordID = guid();",
											"postman.setEnvironmentVariable(\"random_guid\", randomRecordID);",
											"",
											"function guid() {",
											"  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
											"    s4() + '-' + s4() + s4() + s4();",
											"}",
											"",
											"function s4() {",
											"  return Math.floor((1 + Math.random()) * 0x10000)",
											"    .toString(16)",
											"    .substring(1);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"SubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\n\t\"CheckId\" : \"{{ms_test_checkid1}}\",\n\t\"ComponentId\": \"{{ms_test_component1}}\",\n\t\"Description\": \"Test\",\n    \"AlertName\": \"{{ms_test_alertname1}}\",\n    \"State\": \"{{ms_test_state_ok}}\",\n    \"Sourcetimestamp\": \"{{current_timestamp}}\",\n    \"TimeGenerated\": \"{{current_timestamp}}\",\n    \"RecordID\": \"{{random_guid}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/alerts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(checkStatusCode, 30000);",
											"",
											"function checkStatusCode() {",
											"    pm.sendRequest('https://postman-echo.com/get', function (err,res) {",
											"       tests['status code should be 200']=res.code ===200; ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Ok (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Environment State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    pm.expect(jsonData.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"    pm.expect(jsonData.state.triggeredByCheckId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(jsonData.state.triggeredByElementId).to.equal(pm.globals.get(\"ms_test_component1\"));",
											"});",
											"",
											"pm.test(\"Component1 State should be in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"    ",
											"    pm.expect(component1).to.not.equal(null);",
											"    pm.expect(component1.state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											"",
											"pm.test(\"Check1 should be added to Component1 and is in State: \" + pm.globals.get(\"ms_test_state_ok\"), function () {",
											"    ",
											"    var component1 = Utils.getNodeByIdRecursive(jsonData, pm.globals.get(\"ms_test_component1\"));",
											"",
											"    pm.expect(component1.checks.length).to.equal(1);",
											"    pm.expect(component1.checks[0].elementId).to.equal(pm.globals.get(\"ms_test_checkid1\"));",
											"    pm.expect(component1.checks[0].state.state).to.equal(pm.globals.get(\"ms_test_state_ok\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test InternalJobs",
					"item": [
						{
							"name": "Start Internal Job",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var end_timestamp = new Date();\r",
											"postman.setEnvironmentVariable(\"start_timestamp\", end_timestamp.toISOString());\r",
											"\r",
											"var start_timestamp = new Date(new Date().getTime() + 1200000);\r",
											"postman.setEnvironmentVariable(\"end_timestamp\", start_timestamp.toISOString());\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Created (201)\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.globals.set(\"ms_test_internalJob_id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"type\": \"SLA\",\r\n   \"environmentSubscriptionId\": \"{{ms_test_environment_subscriptionid}}\",\r\n   \"startDate\" : \"{{start_timestamp}}\",\r\n   \"endDate\" : \"{{end_timestamp}}\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/api/job",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"job"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Jobs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/job?type={{type}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"job"
									],
									"query": [
										{
											"key": "type",
											"value": "{{type}}",
											"description": "Sla"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Internal Job",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/job/{{id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"job",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Data for deleted  Internal Job",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/job/{{id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"job",
										"{{id}}"
									],
									"query": [
										{
											"key": "slaHistory",
											"value": "true",
											"disabled": true
										},
										{
											"key": "elementId",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Tear down Test Environment",
					"item": [
						{
							"name": "DeleteEnvironment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: Accepted (202)\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/api/masterdata/environments?elementId={{ms_test_environment_subscriptionid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"masterdata",
										"environments"
									],
									"query": [
										{
											"key": "elementId",
											"value": "{{ms_test_environment_subscriptionid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Environment State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should be: NotFound (404)\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearer-token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/api/environments/{{ms_test_environment_name}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"environments",
										"{{ms_test_environment_name}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"Utils = {",
							"    getNodeByIdRecursive: function(startNode, elementId) {",
							"        var result = null;",
							"        console.log(\"looking for \" + elementId + \" in \" + startNode.elementId);",
							"        ",
							"        if (startNode) {",
							"          if (startNode.elementId === elementId) {",
							"              console.log(\"found node!\");",
							"              return startNode;",
							"          }",
							"          ",
							"          var childNodes = [];",
							"          ",
							"          if (startNode.services) {",
							"              childNodes = startNode.services;",
							"          } else if (startNode.actions) {",
							"              childNodes = startNode.actions;",
							"          } else if (startNode.components) {",
							"              childNodes = startNode.components;",
							"          }",
							"    ",
							"          if (childNodes && childNodes.length) {",
							"              for (let childIndex = 0; childIndex < childNodes.length; childIndex++) {",
							"                result = this.getNodeByIdRecursive(childNodes[childIndex], elementId);",
							"                if (result) {",
							"                  return result;",
							"                }",
							"              }",
							"          }",
							"            ",
							"          if (startNode.checks) {",
							"            for (let checksIndex = 0; checksIndex < startNode.checks.length; checksIndex++) {",
							"                result = this.getNodeByIdRecursive(startNode.checks[checksIndex], elementId);",
							"                if (result) {",
							"                   return result;",
							"                }",
							"            }",
							"          }",
							"        }",
							"        ",
							"        return result;",
							"        ",
							"    }",
							"};"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}